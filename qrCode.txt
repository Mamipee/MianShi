package BOOT-INF.classes.cn.hsz.controller;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.Binarizer;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.DecodeHintType;
import com.google.zxing.EncodeHintType;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.common.HybridBinarizer;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletResponse;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@Api(")
@CrossOrigin
@RestController
@RequestMapping({"qr"})
public class QRCodeController {
  private static final int FRONT_COLOR = -16777216;
  
  private static final int BACKGROUND_COLOR = -1;
  
  @ApiOperation(")
  @GetMapping({"create"})
  @ApiImplicitParam(name = "content", value = "content", required = true, dataType = "String", paramType = "query")
  public void createQrCode(String content, HttpServletResponse response) throws WriterException, IOException {
    int width = 400, height = 400;
    Map<EncodeHintType, Object> hints = new HashMap<>();
    hints.put(EncodeHintType.CHARACTER_SET, "utf-8");
    hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M);
    BitMatrix matrix = (new QRCodeWriter()).encode(content, BarcodeFormat.QR_CODE, width, height, hints);
    int[] pixels = new int[width * height];
    for (int y = 0; y < matrix.getHeight(); y++) {
      for (int x = 0; x < matrix.getWidth(); x++) {
        int num1 = (int)(50.0D - 37.0D / matrix.getHeight() * (y + 1));
        int num2 = (int)(165.0D - 93.0D / matrix.getHeight() * (y + 1));
        int num3 = (int)(162.0D - 55.0D / matrix.getHeight() * (y + 1));
        Color color = new Color(num1, num2, num3);
        int colorInt = color.getRGB();
        pixels[y * width + x] = matrix.get(x, y) ? colorInt : 16777215;
      } 
    } 
    BufferedImage image = new BufferedImage(width, height, 1);
    image.getRaster().setDataElements(0, 0, width, height, pixels);
    ImageIO.write(image, "png", (OutputStream)response.getOutputStream());
  }
  
  @ApiOperation(")
  @GetMapping({"decode"})
  @ApiImplicitParam(name = "fileName", value = "fileName", required = true, dataType = "String", paramType = "query")
  public String decodeQrcode(String fileName) throws IOException, NotFoundException {
    BufferedImage image = ImageIO.read(new File("E:\\QRcreated\\" + fileName));
    BufferedImageLuminanceSource bufferedImageLuminanceSource = new BufferedImageLuminanceSource(image);
    HybridBinarizer hybridBinarizer = new HybridBinarizer((LuminanceSource)bufferedImageLuminanceSource);
    BinaryBitmap binaryBitmap = new BinaryBitmap((Binarizer)hybridBinarizer);
    Map<DecodeHintType, Object> hints = new HashMap<>();
    hints.put(DecodeHintType.CHARACTER_SET, "UTF-8");
    Result result = (new MultiFormatReader()).decode(binaryBitmap, hints);
    return result.getText();
  }
  
  @ApiOperation(")
  @GetMapping({"code"})
  public void QrCode(String content, HttpServletResponse response) throws WriterException, IOException {
    int width = 400, height = 400;
    Map<EncodeHintType, String> hints = new HashMap<>();
    hints.put(EncodeHintType.CHARACTER_SET, "utf-8");
    BitMatrix bitMatrix = (new QRCodeWriter()).encode(content, BarcodeFormat.QR_CODE, width, height, hints);
    BufferedImage bufferedImage = new BufferedImage(bitMatrix.getWidth(), bitMatrix.getHeight(), 1);
    for (int i = 0; i < bitMatrix.getWidth(); i++) {
      for (int j = 0; j < bitMatrix.getHeight(); j++)
        bufferedImage.setRGB(i, j, bitMatrix.get(i, j) ? -16777216 : -1); 
    } 
    ImageIO.write(bufferedImage, "png", (OutputStream)response.getOutputStream());
  }
}
